./init.lua:-- LEADER key
./init.lua:vim.g.mapleader = " "
./init.lua:vim.g.maplocalleader = " "
./init.lua:
./init.lua:vim.cmd("set keymap=russian-typograph")
./init.lua:vim.opt.iminsert = 0
./init.lua:vim.opt.imsearch = -1
./init.lua:-- some preferences
./init.lua:vim.cmd("set relativenumber")
./init.lua:vim.cmd("set nowrap")
./init.lua:vim.cmd("set formatoptions-=t")
./init.lua:vim.cmd("set lazyredraw")
./init.lua:vim.cmd("set tabstop=4 shiftwidth=4 smarttab expandtab tabstop=8 softtabstop=0")
./init.lua:vim.g.have_nerd_font = true
./init.lua:vim.opt.termguicolors = true
./init.lua:vim.g.loaded_netrw = 1
./init.lua:vim.g.loaded_netrwPlugin = 1
./init.lua:vim.opt.mouse = "a"
./init.lua:vim.opt.showmode = false
./init.lua:vim.opt.clipboard = "unnamedplus"
./init.lua:vim.opt.breakindent = true
./init.lua:vim.opt.undofile = true
./init.lua:vim.opt.ignorecase = true
./init.lua:vim.opt.smartcase = true
./init.lua:vim.opt.signcolumn = "yes"
./init.lua:vim.opt.updatetime = 50
./init.lua:vim.opt.timeoutlen = 300
./init.lua:vim.opt.splitright = true
./init.lua:vim.opt.splitbelow = true
./init.lua:vim.opt.list = true
./init.lua:vim.opt.listchars = { tab = "Â» ", trail = "Â·", nbsp = "â£" }
./init.lua:vim.opt.inccommand = "split"
./init.lua:vim.opt.cursorline = true
./init.lua:-- vim.opt.scrolloff = 999
./init.lua:-- vim.opt.nostartofline = true
./init.lua:vim.opt.number = true
./init.lua:vim.opt.hlsearch = true
./init.lua:vim.keymap.set("n", "<Esc>", "<cmd>nohlsearch<CR>")
./init.lua:require("mappings.keep-eng-in-normal")
./init.lua:require("mappings.init-mappings")
./init.lua:require("lazy-init")
./init.lua:require("mappings.post-mappings")
./init.lua:require("ui-override")
./init.lua:
./init.lua:vim.lsp.set_log_level("debug")
./init.lua:
./init.lua:-- vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
./init.lua:--     -- delay update diagnostics
./init.lua:--     update_in_insert = true,
./init.lua:-- })
./init.lua:--
./.gp.md:Additional context is provided below.
./.gp.md:
./.gp.md:I have the following from nvim-custom/lua/mappings/post-mappings.lua:
./.gp.md:
./.gp.md:```lua
./.gp.md:vim.keymap.set("v", "<leader>aca", "<cmd>GpContext<cr><cmd>q<cr>", { desc = "[A]I [C]ontext [A]dd" })
./.gp.md:vim.keymap.set("n", "<leader>acc", "<cmd>!rm .gp.md<cr>", { desc = "[A]I [C]ontext [C]lear" })
./.gp.md:vim.keymap.set("n", "<leader>aa", "<cmd>GpPopup<cr>", { desc = "[A]I [A]sk" })
./.gp.md:```
./.gp.md:
./.gp.md:
Binary file ./lua/.DS_Store matches
./lua/plugins/lspconfig.lua:-- lua/custom/plugins/core_dev_setup.lua
./lua/plugins/lspconfig.lua:-- Minimal LSP, Formatter, and Completion setup.
./lua/plugins/lspconfig.lua:-- This file is fully corrected and modernized.
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:return {
./lua/plugins/lspconfig.lua:    -- ============== I. Mason - Tool Installer =============== --
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "williamboman/mason.nvim",
./lua/plugins/lspconfig.lua:        cmd = { "Mason", "MasonInstall", "MasonInstallAll", "MasonUpdate" },
./lua/plugins/lspconfig.lua:        opts = { -- Using opts will run mason.setup(opts)
./lua/plugins/lspconfig.lua:            ui = {
./lua/plugins/lspconfig.lua:                icons = {
./lua/plugins/lspconfig.lua:                    package_installed = "â",
./lua/plugins/lspconfig.lua:                    package_pending = "â",
./lua/plugins/lspconfig.lua:                    package_uninstalled = "â",
./lua/plugins/lspconfig.lua:                },
./lua/plugins/lspconfig.lua:            },
./lua/plugins/lspconfig.lua:        },
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:    -- ============== II. Formatting (conform.nvim) =============== --
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "stevearc/conform.nvim",
./lua/plugins/lspconfig.lua:        event = { "BufWritePre" }, -- Or "VeryLazy" or on specific filetypes
./lua/plugins/lspconfig.lua:        cmd = { "ConformInfo" },
./lua/plugins/lspconfig.lua:        opts = {
./lua/plugins/lspconfig.lua:            notify_on_error = true,
./lua/plugins/lspconfig.lua:            format_on_save = {
./lua/plugins/lspconfig.lua:                timeout_ms = 500,
./lua/plugins/lspconfig.lua:                lsp_fallback = true, -- Fallback to LSP formatting if conform fails
./lua/plugins/lspconfig.lua:            },
./lua/plugins/lspconfig.lua:            formatters_by_ft = {
./lua/plugins/lspconfig.lua:                lua = { "stylua" },
./lua/plugins/lspconfig.lua:                python = { "ruff_fix", "ruff_format", "ruff_organize_imports" },
./lua/plugins/lspconfig.lua:                sh = { "shfmt" },
./lua/plugins/lspconfig.lua:            },
./lua/plugins/lspconfig.lua:        },
./lua/plugins/lspconfig.lua:        init = function() -- Optional: Ensure keymap for manual formatting is set
./lua/plugins/lspconfig.lua:            vim.keymap.set(
./lua/plugins/lspconfig.lua:                { "n", "v" },
./lua/plugins/lspconfig.lua:                "<leader>cf",
./lua/plugins/lspconfig.lua:                function() require("conform").format({ async = true, lsp_fallback = true }) end,
./lua/plugins/lspconfig.lua:                { desc = "Format buffer with Conform" }
./lua/plugins/lspconfig.lua:            )
./lua/plugins/lspconfig.lua:        end,
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:    -- ============== III. LSP Configuration (mason-lspconfig & nvim-lspconfig) =============== --
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "williamboman/mason-lspconfig.nvim",
./lua/plugins/lspconfig.lua:        dependencies = { "williamboman/mason.nvim", "neovim/nvim-lspconfig" },
./lua/plugins/lspconfig.lua:        -- This plugin is configured in the nvim-lspconfig section below.
./lua/plugins/lspconfig.lua:        -- We just need to ensure it's loaded.
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "neovim/nvim-lspconfig",
./lua/plugins/lspconfig.lua:        event = { "BufReadPre", "BufNewFile" },
./lua/plugins/lspconfig.lua:        dependencies = {
./lua/plugins/lspconfig.lua:            "williamboman/mason-lspconfig.nvim",
./lua/plugins/lspconfig.lua:            "hrsh7th/cmp-nvim-lsp", -- nvim-cmp source for LSP
./lua/plugins/lspconfig.lua:        },
./lua/plugins/lspconfig.lua:        config = function()
./lua/plugins/lspconfig.lua:            -- Get capabilities from nvim-cmp
./lua/plugins/lspconfig.lua:            local capabilities = require("cmp_nvim_lsp").default_capabilities()
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:            --=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
./lua/plugins/lspconfig.lua:            --             ROBUST ON_ATTACH VIA AUTOCMD
./lua/plugins/lspconfig.lua:            --=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
./lua/plugins/lspconfig.lua:            vim.api.nvim_create_autocmd("LspAttach", {
./lua/plugins/lspconfig.lua:                group = vim.api.nvim_create_augroup("UserLspConfig", { clear = true }),
./lua/plugins/lspconfig.lua:                desc = "Setup buffer-local LSP keymaps",
./lua/plugins/lspconfig.lua:                callback = function(ev)
./lua/plugins/lspconfig.lua:                    local bufnr = ev.buf
./lua/plugins/lspconfig.lua:                    local function set_keymap(mode, lhs, rhs, desc)
./lua/plugins/lspconfig.lua:                        local opts = { noremap = true, silent = false, buffer = bufnr, desc = desc }
./lua/plugins/lspconfig.lua:                        vim.keymap.set(mode, lhs, rhs, opts)
./lua/plugins/lspconfig.lua:                    end
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:                    vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "gd", vim.lsp.buf.definition, "[G]oto [D]efinition")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "K", vim.lsp.buf.hover, "[K]eyword Hover")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "gi", vim.lsp.buf.implementation, "[G]oto [I]mplementation")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "gr", vim.lsp.buf.references, "[G]oto [R]eferences")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<C-k>", vim.lsp.buf.signature_help, "[S]ignature [H]elp")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>cD", vim.lsp.buf.type_definition, "[T]ype [D]efinition")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>cr", vim.lsp.buf.rename, "[R]e[n]ame")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>wa", vim.lsp.buf.add_workspace_folder, "[W]orkspace [A]dd Folder")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>wr", vim.lsp.buf.remove_workspace_folder, "[W]orkspace [R]emove Folder")
./lua/plugins/lspconfig.lua:                    set_keymap(
./lua/plugins/lspconfig.lua:                        "n",
./lua/plugins/lspconfig.lua:                        "<leader>lwl",
./lua/plugins/lspconfig.lua:                        function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end,
./lua/plugins/lspconfig.lua:                        "[W]orkspace [L]ist Folders"
./lua/plugins/lspconfig.lua:                    )
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>cd", vim.diagnostic.open_float, "[L]ine [D]iagnostics")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>cl", vim.diagnostic.setloclist, "[L]ocation [L]ist Diagnostics")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>cn", vim.diagnostic.goto_next, "[N]ext [D]iagnostic")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "<leader>cp", vim.diagnostic.goto_prev, "[P]revious [D]iagnostic")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "[d", vim.diagnostic.goto_prev, "Go to Previous Diagnostic")
./lua/plugins/lspconfig.lua:                    set_keymap("n", "]d", vim.diagnostic.goto_next, "Go to Next Diagnostic")
./lua/plugins/lspconfig.lua:                end,
./lua/plugins/lspconfig.lua:            })
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:            --=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
./lua/plugins/lspconfig.lua:            --                           SERVER SETUP
./lua/plugins/lspconfig.lua:            -- This section is refactored to prevent duplicate server attachments.
./lua/plugins/lspconfig.lua:            --=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
./lua/plugins/lspconfig.lua:            local lspconfig = require("lspconfig")
./lua/plugins/lspconfig.lua:            local mason_lspconfig = require("mason-lspconfig")
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:            local servers = { "lua_ls", "pyright", "bashls" }
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:            mason_lspconfig.setup({
./lua/plugins/lspconfig.lua:                automatic_enable = true,
./lua/plugins/lspconfig.lua:                ensure_installed = servers,
./lua/plugins/lspconfig.lua:                handlers = {
./lua/plugins/lspconfig.lua:                    function(server_name)
./lua/plugins/lspconfig.lua:                        lspconfig[server_name].setup({
./lua/plugins/lspconfig.lua:                            capabilities = capabilities,
./lua/plugins/lspconfig.lua:                        })
./lua/plugins/lspconfig.lua:                    end,
./lua/plugins/lspconfig.lua:                    ["lua_ls"] = function()
./lua/plugins/lspconfig.lua:                        lspconfig.lua_ls.setup({
./lua/plugins/lspconfig.lua:                            capabilities = capabilities,
./lua/plugins/lspconfig.lua:                            settings = {
./lua/plugins/lspconfig.lua:                                Lua = {
./lua/plugins/lspconfig.lua:                                    runtime = { version = "LuaJIT" },
./lua/plugins/lspconfig.lua:                                    diagnostics = { globals = { "vim" } },
./lua/plugins/lspconfig.lua:                                    workspace = {
./lua/plugins/lspconfig.lua:                                        library = vim.api.nvim_get_runtime_file("", true),
./lua/plugins/lspconfig.lua:                                        checkThirdParty = false,
./lua/plugins/lspconfig.lua:                                    },
./lua/plugins/lspconfig.lua:                                    telemetry = { enable = false },
./lua/plugins/lspconfig.lua:                                    hint = { enable = true },
./lua/plugins/lspconfig.lua:                                },
./lua/plugins/lspconfig.lua:                            },
./lua/plugins/lspconfig.lua:                        })
./lua/plugins/lspconfig.lua:                    end,
./lua/plugins/lspconfig.lua:                },
./lua/plugins/lspconfig.lua:            })
./lua/plugins/lspconfig.lua:        end,
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:    -- ============== IV. Autocompletion (nvim-cmp) =============== --
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "hrsh7th/nvim-cmp",
./lua/plugins/lspconfig.lua:        event = "InsertEnter",
./lua/plugins/lspconfig.lua:        dependencies = {
./lua/plugins/lspconfig.lua:            "hrsh7th/cmp-nvim-lsp",
./lua/plugins/lspconfig.lua:            "hrsh7th/cmp-buffer",
./lua/plugins/lspconfig.lua:            "hrsh7th/cmp-path",
./lua/plugins/lspconfig.lua:            "L3MON4D3/LuaSnip",
./lua/plugins/lspconfig.lua:            "saadparwaiz1/cmp_luasnip",
./lua/plugins/lspconfig.lua:            "windwp/nvim-autopairs",
./lua/plugins/lspconfig.lua:            "onsails/lspkind.nvim",
./lua/plugins/lspconfig.lua:        },
./lua/plugins/lspconfig.lua:        config = function()
./lua/plugins/lspconfig.lua:            local cmp = require("cmp")
./lua/plugins/lspconfig.lua:            local luasnip = require("luasnip")
./lua/plugins/lspconfig.lua:            local lspkind = require("lspkind")
./lua/plugins/lspconfig.lua:            local cmp_autopairs = require("nvim-autopairs.completion.cmp")
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:            cmp.setup({
./lua/plugins/lspconfig.lua:                snippet = {
./lua/plugins/lspconfig.lua:                    expand = function(args) luasnip.lsp_expand(args.body) end,
./lua/plugins/lspconfig.lua:                },
./lua/plugins/lspconfig.lua:                mapping = cmp.mapping.preset.insert({
./lua/plugins/lspconfig.lua:                    ["<C-k>"] = cmp.mapping.select_prev_item(),
./lua/plugins/lspconfig.lua:                    ["<C-j>"] = cmp.mapping.select_next_item(),
./lua/plugins/lspconfig.lua:                    ["<C-Space>"] = cmp.mapping.complete(),
./lua/plugins/lspconfig.lua:                    ["<C-e>"] = cmp.mapping.abort(),
./lua/plugins/lspconfig.lua:                    ["<CR>"] = cmp.mapping.confirm({ select = true }),
./lua/plugins/lspconfig.lua:                    ["<Tab>"] = cmp.mapping(function(fallback)
./lua/plugins/lspconfig.lua:                        if cmp.visible() then
./lua/plugins/lspconfig.lua:                            cmp.select_next_item()
./lua/plugins/lspconfig.lua:                        elseif luasnip.expand_or_jumpable() then
./lua/plugins/lspconfig.lua:                            luasnip.expand_or_jump()
./lua/plugins/lspconfig.lua:                        else
./lua/plugins/lspconfig.lua:                            fallback()
./lua/plugins/lspconfig.lua:                        end
./lua/plugins/lspconfig.lua:                    end, { "i", "s" }),
./lua/plugins/lspconfig.lua:                    ["<S-Tab>"] = cmp.mapping(function(fallback)
./lua/plugins/lspconfig.lua:                        if cmp.visible() then
./lua/plugins/lspconfig.lua:                            cmp.select_prev_item()
./lua/plugins/lspconfig.lua:                        elseif luasnip.jumpable(-1) then
./lua/plugins/lspconfig.lua:                            luasnip.jump(-1)
./lua/plugins/lspconfig.lua:                        else
./lua/plugins/lspconfig.lua:                            fallback()
./lua/plugins/lspconfig.lua:                        end
./lua/plugins/lspconfig.lua:                    end, { "i", "s" }),
./lua/plugins/lspconfig.lua:                }),
./lua/plugins/lspconfig.lua:                sources = cmp.config.sources({
./lua/plugins/lspconfig.lua:                    { name = "nvim_lsp" },
./lua/plugins/lspconfig.lua:                    { name = "luasnip" },
./lua/plugins/lspconfig.lua:                    { name = "buffer" },
./lua/plugins/lspconfig.lua:                    { name = "path" },
./lua/plugins/lspconfig.lua:                }),
./lua/plugins/lspconfig.lua:                formatting = {
./lua/plugins/lspconfig.lua:                    format = lspkind.cmp_format({
./lua/plugins/lspconfig.lua:                        mode = "symbol_text",
./lua/plugins/lspconfig.lua:                        maxwidth = 50,
./lua/plugins/lspconfig.lua:                        ellipsis_char = "...",
./lua/plugins/lspconfig.lua:                    }),
./lua/plugins/lspconfig.lua:                },
./lua/plugins/lspconfig.lua:                experimental = {
./lua/plugins/lspconfig.lua:                    ghost_text = false,
./lua/plugins/lspconfig.lua:                },
./lua/plugins/lspconfig.lua:                window = {
./lua/plugins/lspconfig.lua:                    completion = cmp.config.window.bordered(),
./lua/plugins/lspconfig.lua:                    documentation = cmp.config.window.bordered(),
./lua/plugins/lspconfig.lua:                },
./lua/plugins/lspconfig.lua:            })
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:            cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
./lua/plugins/lspconfig.lua:        end,
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:    -- Snippet Engine
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "L3MON4D3/LuaSnip",
./lua/plugins/lspconfig.lua:        version = "v2.*",
./lua/plugins/lspconfig.lua:        build = "make install_jsregexp",
./lua/plugins/lspconfig.lua:        dependencies = { "rafamadriz/friendly-snippets" },
./lua/plugins/lspconfig.lua:        config = function() require("luasnip.loaders.from_vscode").lazy_load() end,
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:
./lua/plugins/lspconfig.lua:    -- Autopairs
./lua/plugins/lspconfig.lua:    {
./lua/plugins/lspconfig.lua:        "windwp/nvim-autopairs",
./lua/plugins/lspconfig.lua:        event = "InsertEnter",
./lua/plugins/lspconfig.lua:        config = function() require("nvim-autopairs").setup({}) end,
./lua/plugins/lspconfig.lua:    },
./lua/plugins/lspconfig.lua:}
./lua/plugins/telescope.lua:return {
./lua/plugins/telescope.lua:    "nvim-telescope/telescope.nvim",
./lua/plugins/telescope.lua:    tag = "0.1.8",
./lua/plugins/telescope.lua:    cmd = "Telescope",
./lua/plugins/telescope.lua:    keys = {
./lua/plugins/telescope.lua:        { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "[F]ind [F]iles" },
./lua/plugins/telescope.lua:        { "<leader>fw", "<cmd>Telescope live_grep<cr>", desc = "[F]ind in files (find [W]ords)" },
./lua/plugins/telescope.lua:        { "<leader>fg", "<cmd>Telescope git_files<cr>", desc = "[F]ind [G]it files" },
./lua/plugins/telescope.lua:        { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "[F]ind [B]uffers" },
./lua/plugins/telescope.lua:        { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "[F]ind [R]ecent" },
./lua/plugins/telescope.lua:    },
./lua/plugins/telescope.lua:    dependencies = { "nvim-lua/plenary.nvim" },
./lua/plugins/telescope.lua:}
./lua/plugins/barbar.lua:return {
./lua/plugins/barbar.lua:    {
./lua/plugins/barbar.lua:        "romgrk/barbar.nvim",
./lua/plugins/barbar.lua:        dependencies = {
./lua/plugins/barbar.lua:            "lewis6991/gitsigns.nvim", -- OPTIONAL: for git status
./lua/plugins/barbar.lua:            "nvim-tree/nvim-web-devicons", -- OPTIONAL: for file icons
./lua/plugins/barbar.lua:        },
./lua/plugins/barbar.lua:        init = function() vim.g.barbar_auto_setup = false end,
./lua/plugins/barbar.lua:        opts = {
./lua/plugins/barbar.lua:            -- Set the filetypes which barbar will offset itself for
./lua/plugins/barbar.lua:            sidebar_filetypes = {
./lua/plugins/barbar.lua:                NvimTree = true,
./lua/plugins/barbar.lua:                undotree = {
./lua/plugins/barbar.lua:                    text = "undotree",
./lua/plugins/barbar.lua:                    align = "center", -- *optionally* specify an alignment (either 'left', 'center', or 'right')
./lua/plugins/barbar.lua:                },
./lua/plugins/barbar.lua:            },
./lua/plugins/barbar.lua:        },
./lua/plugins/barbar.lua:        version = "^1.0.0", -- optional: only update when a new 1.x version is released
./lua/plugins/barbar.lua:    },
./lua/plugins/barbar.lua:}
./lua/plugins/alpha.lua:return {
./lua/plugins/alpha.lua:    "goolord/alpha-nvim",
./lua/plugins/alpha.lua:    dependencies = {
./lua/plugins/alpha.lua:        "echasnovski/mini.icons",
./lua/plugins/alpha.lua:        "nvim-lua/plenary.nvim",
./lua/plugins/alpha.lua:    },
./lua/plugins/alpha.lua:    config = function() require("alpha").setup(require("alpha.themes.dashboard").config) end,
./lua/plugins/alpha.lua:    lazy = true,
./lua/plugins/alpha.lua:}
./lua/plugins/nvim-tree.lua:return {
./lua/plugins/nvim-tree.lua:    {
./lua/plugins/nvim-tree.lua:        "nvim-tree/nvim-tree.lua",
./lua/plugins/nvim-tree.lua:        dependencies = { "nvim-tree/nvim-web-devicons" },
./lua/plugins/nvim-tree.lua:        keys = {
./lua/plugins/nvim-tree.lua:            { "<leader>e", "<cmd>NvimTreeToggle<cr>", desc = "Toggle NvimTree" },
./lua/plugins/nvim-tree.lua:        },
./lua/plugins/nvim-tree.lua:        config = function()
./lua/plugins/nvim-tree.lua:            require("nvim-tree").setup({
./lua/plugins/nvim-tree.lua:                view = {
./lua/plugins/nvim-tree.lua:                    width = 45,
./lua/plugins/nvim-tree.lua:                },
./lua/plugins/nvim-tree.lua:                update_focused_file = {
./lua/plugins/nvim-tree.lua:                    enable = true,
./lua/plugins/nvim-tree.lua:                },
./lua/plugins/nvim-tree.lua:            })
./lua/plugins/nvim-tree.lua:        end,
./lua/plugins/nvim-tree.lua:    },
./lua/plugins/nvim-tree.lua:}
./lua/plugins/nvim-scrollbar.lua:return {
./lua/plugins/nvim-scrollbar.lua:    "petertriho/nvim-scrollbar",
./lua/plugins/nvim-scrollbar.lua:    config = function() require("scrollbar").setup() end,
./lua/plugins/nvim-scrollbar.lua:}
./lua/plugins/markdown-preview.lua:return {
./lua/plugins/markdown-preview.lua:    "iamcco/markdown-preview.nvim",
./lua/plugins/markdown-preview.lua:    cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
./lua/plugins/markdown-preview.lua:    ft = { "markdown" },
./lua/plugins/markdown-preview.lua:    build = function() vim.fn["mkdp#util#install"]() end,
./lua/plugins/markdown-preview.lua:}
./lua/plugins/diffview.lua:return {
./lua/plugins/diffview.lua:    "sindrets/diffview.nvim",
./lua/plugins/diffview.lua:}
./lua/plugins/undo-tree.lua:return {
./lua/plugins/undo-tree.lua:    {
./lua/plugins/undo-tree.lua:        "mbbill/undotree",
./lua/plugins/undo-tree.lua:        lazy = false,
./lua/plugins/undo-tree.lua:        keys = {
./lua/plugins/undo-tree.lua:            { "<leader>tu", vim.cmd.UndotreeToggle, desc = "[T]oggle [U]ndo tree" },
./lua/plugins/undo-tree.lua:        },
./lua/plugins/undo-tree.lua:    },
./lua/plugins/undo-tree.lua:}
./lua/plugins/mini.lua:return {
./lua/plugins/mini.lua:    { -- Collection of various small independent plugins/modules
./lua/plugins/mini.lua:        "echasnovski/mini.nvim",
./lua/plugins/mini.lua:        dependencies = {
./lua/plugins/mini.lua:            { "echasnovski/mini.ai" },
./lua/plugins/mini.lua:            { "echasnovski/mini.diff" },
./lua/plugins/mini.lua:            { "echasnovski/mini-git" },
./lua/plugins/mini.lua:        },
./lua/plugins/mini.lua:        version = "*", -- stable
./lua/plugins/mini.lua:        keys = {
./lua/plugins/mini.lua:            {
./lua/plugins/mini.lua:                "<leader>td",
./lua/plugins/mini.lua:                "<cmd>lua MiniDiff.toggle_overlay()<cr>",
./lua/plugins/mini.lua:                desc = "[T]oggle live inline [D]iff overlay",
./lua/plugins/mini.lua:            },
./lua/plugins/mini.lua:        },
./lua/plugins/mini.lua:        event = "VeryLazy",
./lua/plugins/mini.lua:        config = function()
./lua/plugins/mini.lua:            -- Better Around/Inside textobjects
./lua/plugins/mini.lua:            --
./lua/plugins/mini.lua:            -- Examples:
./lua/plugins/mini.lua:            --  - va)  - [V]isually select [A]round [)]paren
./lua/plugins/mini.lua:            --  - yinq - [Y]ank [I]nside [N]ext [']quote
./lua/plugins/mini.lua:            --  - ci'  - [C]hange [I]nside [']quote
./lua/plugins/mini.lua:            require("mini.ai").setup({ n_lines = 50 })
./lua/plugins/mini.lua:
./lua/plugins/mini.lua:            -- Simple and easy statusline.
./lua/plugins/mini.lua:            --  You could remove this setup call if you don't like it,
./lua/plugins/mini.lua:            --  and try some other statusline plugin
./lua/plugins/mini.lua:
./lua/plugins/mini.lua:            require("mini.git").setup()
./lua/plugins/mini.lua:            require("mini.diff").setup()
./lua/plugins/mini.lua:            local statusline = require("mini.statusline")
./lua/plugins/mini.lua:            -- set use_icons to true if you have a Nerd Font
./lua/plugins/mini.lua:            statusline.setup({ use_icons = vim.g.have_nerd_font })
./lua/plugins/mini.lua:
./lua/plugins/mini.lua:            -- You can configure sections in the statusline by overriding their
./lua/plugins/mini.lua:            -- default behavior. For example, here we set the section for
./lua/plugins/mini.lua:            -- cursor location to LINE:COLUMN
./lua/plugins/mini.lua:            ---@diagnostic disable-next-line: duplicate-set-field
./lua/plugins/mini.lua:            statusline.section_location = function() return "%2l:%-2v" end
./lua/plugins/mini.lua:
./lua/plugins/mini.lua:            -- ... and there is more!
./lua/plugins/mini.lua:            --  Check out: https://github.com/echasnovski/mini.nvim
./lua/plugins/mini.lua:        end,
./lua/plugins/mini.lua:    },
./lua/plugins/mini.lua:}
./lua/plugins/which-key.lua:return { -- Useful plugin to show you pending keybinds.
./lua/plugins/which-key.lua:    "folke/which-key.nvim",
./lua/plugins/which-key.lua:    event = "VimEnter", -- Sets the loading event to 'VimEnter'
./lua/plugins/which-key.lua:    config = function() -- This is the function that runs, AFTER loading
./lua/plugins/which-key.lua:        require("which-key").setup()
./lua/plugins/which-key.lua:
./lua/plugins/which-key.lua:        -- Document existing key chains
./lua/plugins/which-key.lua:        require("which-key").add({
./lua/plugins/which-key.lua:            { "<leader>a", group = "[A]I" },
./lua/plugins/which-key.lua:            { "<leader>c", group = "[C]ode" },
./lua/plugins/which-key.lua:            { "<leader>d", group = "[D]ocument" },
./lua/plugins/which-key.lua:            { "<leader>r", group = "[R]ename" },
./lua/plugins/which-key.lua:            { "<leader>s", group = "[S]earch" },
./lua/plugins/which-key.lua:            { "<leader>w", group = "[W]orkspace" },
./lua/plugins/which-key.lua:            { "<leader>t", group = "[T]oggle" },
./lua/plugins/which-key.lua:            { "<leader>h", group = "Git [H]unk", mode = { "n", "v" } },
./lua/plugins/which-key.lua:        })
./lua/plugins/which-key.lua:    end,
./lua/plugins/which-key.lua:    enable = false,
./lua/plugins/which-key.lua:}
./lua/plugins/treesitter.lua:return {
./lua/plugins/treesitter.lua:    {
./lua/plugins/treesitter.lua:        "nvim-treesitter/nvim-treesitter",
./lua/plugins/treesitter.lua:        config = function()
./lua/plugins/treesitter.lua:            local configs = require("nvim-treesitter.configs")
./lua/plugins/treesitter.lua:            configs.setup({
./lua/plugins/treesitter.lua:                highlight = {
./lua/plugins/treesitter.lua:                    enable = true,
./lua/plugins/treesitter.lua:                    disable = "help",
./lua/plugins/treesitter.lua:                },
./lua/plugins/treesitter.lua:                indent = {
./lua/plugins/treesitter.lua:                    enable = true,
./lua/plugins/treesitter.lua:                },
./lua/plugins/treesitter.lua:                auto_install = true,
./lua/plugins/treesitter.lua:                ensure_installed = {
./lua/plugins/treesitter.lua:                    "vim",
./lua/plugins/treesitter.lua:                    "vimdoc",
./lua/plugins/treesitter.lua:                    "lua",
./lua/plugins/treesitter.lua:                    "luadoc",
./lua/plugins/treesitter.lua:                    "markdown",
./lua/plugins/treesitter.lua:                    "vimdoc",
./lua/plugins/treesitter.lua:                    "html",
./lua/plugins/treesitter.lua:                    "css",
./lua/plugins/treesitter.lua:                    "python",
./lua/plugins/treesitter.lua:                    "php",
./lua/plugins/treesitter.lua:                    "javascript",
./lua/plugins/treesitter.lua:                    "typescript",
./lua/plugins/treesitter.lua:                },
./lua/plugins/treesitter.lua:                sync_install = false,
./lua/plugins/treesitter.lua:                ignore_install = {},
./lua/plugins/treesitter.lua:                modules = {},
./lua/plugins/treesitter.lua:            })
./lua/plugins/treesitter.lua:        end,
./lua/plugins/treesitter.lua:        setup = function()
./lua/plugins/treesitter.lua:            require("telescope").setup({})
./lua/plugins/treesitter.lua:            vim.cmd("TSUpdate")
./lua/plugins/treesitter.lua:        end,
./lua/plugins/treesitter.lua:        lazy = false,
./lua/plugins/treesitter.lua:    },
./lua/plugins/treesitter.lua:}
./lua/plugins/toggleterm.lua:return {
./lua/plugins/toggleterm.lua:    -- amongst your other plugins
./lua/plugins/toggleterm.lua:    { "akinsho/toggleterm.nvim", version = "*", config = true },
./lua/plugins/toggleterm.lua:}
./lua/plugins/lazygit.lua:return {
./lua/plugins/lazygit.lua:    "kdheepak/lazygit.nvim",
./lua/plugins/lazygit.lua:    lazy = true,
./lua/plugins/lazygit.lua:    cmd = {
./lua/plugins/lazygit.lua:        "LazyGit",
./lua/plugins/lazygit.lua:        "LazyGitConfig",
./lua/plugins/lazygit.lua:        "LazyGitCurrentFile",
./lua/plugins/lazygit.lua:        "LazyGitFilter",
./lua/plugins/lazygit.lua:        "LazyGitFilterCurrentFile",
./lua/plugins/lazygit.lua:    },
./lua/plugins/lazygit.lua:    -- optional for floating window border decoration
./lua/plugins/lazygit.lua:    dependencies = {
./lua/plugins/lazygit.lua:        "nvim-lua/plenary.nvim",
./lua/plugins/lazygit.lua:    },
./lua/plugins/lazygit.lua:    -- setting the keybinding for LazyGit with 'keys' is recommended in
./lua/plugins/lazygit.lua:    -- order to load the plugin when the command is run for the first time
./lua/plugins/lazygit.lua:    keys = {
./lua/plugins/lazygit.lua:        { "<leader>lg", "<cmd>LazyGit<cr>", desc = "LazyGit" },
./lua/plugins/lazygit.lua:    },
./lua/plugins/lazygit.lua:}
./lua/plugins/cyberdream-theme.lua:return {
./lua/plugins/cyberdream-theme.lua:    "scottmckendry/cyberdream.nvim",
./lua/plugins/cyberdream-theme.lua:    lazy = false,
./lua/plugins/cyberdream-theme.lua:    priority = 1000,
./lua/plugins/cyberdream-theme.lua:    config = function()
./lua/plugins/cyberdream-theme.lua:        require("cyberdream").setup({
./lua/plugins/cyberdream-theme.lua:            -- Set light or dark variant
./lua/plugins/cyberdream-theme.lua:            variant = "auto", -- use "light" for the light variant. Also accepts "auto" to set dark or light colors based on the current value of `vim.o.background`
./lua/plugins/cyberdream-theme.lua:
./lua/plugins/cyberdream-theme.lua:            -- Enable transparent background
./lua/plugins/cyberdream-theme.lua:            transparent = true,
./lua/plugins/cyberdream-theme.lua:
./lua/plugins/cyberdream-theme.lua:            -- Replace all fillchars with ' ' for the ultimate clean look
./lua/plugins/cyberdream-theme.lua:            hide_fillchars = false,
./lua/plugins/cyberdream-theme.lua:
./lua/plugins/cyberdream-theme.lua:            -- Apply a modern borderless look to pickers like Telescope, Snacks Picker & Fzf-Lua
./lua/plugins/cyberdream-theme.lua:            borderless_pickers = false,
./lua/plugins/cyberdream-theme.lua:
./lua/plugins/cyberdream-theme.lua:            -- Set terminal colors used in `:terminal`
./lua/plugins/cyberdream-theme.lua:            terminal_colors = true,
./lua/plugins/cyberdream-theme.lua:
./lua/plugins/cyberdream-theme.lua:            highlights = {
./lua/plugins/cyberdream-theme.lua:                TelescopeBorder = { fg = "#999999", bold = true },
./lua/plugins/cyberdream-theme.lua:                Visual = { bg = "#999999" },
./lua/plugins/cyberdream-theme.lua:                WinSeparator = { fg = "#999999" },
./lua/plugins/cyberdream-theme.lua:            },
./lua/plugins/cyberdream-theme.lua:            -- Disable or enable colorscheme extensions
./lua/plugins/cyberdream-theme.lua:            extensions = {
./lua/plugins/cyberdream-theme.lua:                telescope = true,
./lua/plugins/cyberdream-theme.lua:                mini = true,
./lua/plugins/cyberdream-theme.lua:                lazy = true,
./lua/plugins/cyberdream-theme.lua:                treesitter = true,
./lua/plugins/cyberdream-theme.lua:                whichkey = true,
./lua/plugins/cyberdream-theme.lua:                alpha = true,
./lua/plugins/cyberdream-theme.lua:                cmp = true,
./lua/plugins/cyberdream-theme.lua:            },
./lua/plugins/cyberdream-theme.lua:        })
./lua/plugins/cyberdream-theme.lua:    end,
./lua/plugins/cyberdream-theme.lua:}
./lua/ui-override.lua:-- -- Custom UI override
./lua/ui-override.lua:-- vim.opt.fillchars = {
./lua/ui-override.lua:--     vert = "â", -- alternatives â
./lua/ui-override.lua:--     fold = " ",
./lua/ui-override.lua:--     eob = " ", -- suppress ~ at EndOfBuffer
./lua/ui-override.lua:--     diff = "â±", -- alternatives = â£¿ â â
./lua/ui-override.lua:--     msgsep = "â¾",
./lua/ui-override.lua:--     foldopen = "â¾",
./lua/ui-override.lua:--     foldsep = "â",
./lua/ui-override.lua:--     foldclose = "â¸",
./lua/ui-override.lua:--     stlnc = " ",
./lua/ui-override.lua:--     stl = " ",
./lua/ui-override.lua:-- }
./lua/ui-override.lua:
./lua/ui-override.lua:vim.cmd.colorscheme("cyberdream")
./lua/ui-override.lua:vim.diagnostic.config({
./lua/ui-override.lua:    virtual_text = false,
./lua/ui-override.lua:    float = {
./lua/ui-override.lua:        header = false,
./lua/ui-override.lua:        border = "rounded",
./lua/ui-override.lua:        focusable = true,
./lua/ui-override.lua:    },
./lua/ui-override.lua:})
./lua/ui-override.lua:-- alpha-config.lua
./lua/ui-override.lua:
./lua/ui-override.lua:local status_ok, alpha = pcall(require, "alpha")
./lua/ui-override.lua:if not status_ok then return end
./lua/ui-override.lua:
./lua/ui-override.lua:local dashboard = require("alpha.themes.dashboard")
./lua/ui-override.lua:dashboard.section.header.val = {
./lua/ui-override.lua:    [[           _                   _               _        _          _            _             _   _        ]],
./lua/ui-override.lua:    [[          /\ \     _          /\ \            /\ \     /\ \    _ / /\          /\ \          /\_\/\_\ _    ]],
./lua/ui-override.lua:    [[         /  \ \   /\_\       /  \ \          /  \ \    \ \ \  /_/ / /          \ \ \        / / / / //\_\  ]],
./lua/ui-override.lua:    [[        / /\ \ \_/ / /      / /\ \ \        / /\ \ \    \ \ \ \___\/           /\ \_\      /\ \/ \ \/ / /  ]],
./lua/ui-override.lua:    [[       / / /\ \___/ /      / / /\ \_\      / / /\ \ \   / / /  \ \ \          / /\/_/     /  \____\__/ /   ]],
./lua/ui-override.lua:    [[      / / /  \/____/      / /_/_ \/_/     / / /  \ \_\  \ \ \   \_\ \        / / /       / /\/________/    ]],
./lua/ui-override.lua:    [[     / / /    / / /      / /____/\       / / /   / / /   \ \ \  / / /       / / /       / / /\/_// / /     ]],
./lua/ui-override.lua:    [[    / / /    / / /      / /\____\/      / / /   / / /     \ \ \/ / /       / / /       / / /    / / /      ]],
./lua/ui-override.lua:    [[   / / /    / / /      / / /______     / / /___/ / /       \ \ \/ /    ___/ / /__     / / /    / / /       ]],
./lua/ui-override.lua:    [[  / / /    / / /      / / /_______\   / / /____\/ /         \ \  /    /\__\/_/___\    \/_/    / / /        ]],
./lua/ui-override.lua:    [[  \/_/     \/_/       \/__________/   \/_________/           \_\/     \/_________/            \/_/         ]],
./lua/ui-override.lua:    [[                                                                                                           ]],
./lua/ui-override.lua:}
./lua/ui-override.lua:
./lua/ui-override.lua:dashboard.section.buttons.val = {
./lua/ui-override.lua:    dashboard.button("ff", "ï  Find file", ":Telescope find_files <CR>"),
./lua/ui-override.lua:    dashboard.button("e", "ï  New file", ":ene <BAR> startinsert <CR>"),
./lua/ui-override.lua:    dashboard.button("fr", "ï  Recently used files", ":Telescope oldfiles <CR>"),
./lua/ui-override.lua:    dashboard.button("fw", "ï  Find text", ":Telescope live_grep <CR>"),
./lua/ui-override.lua:    dashboard.button("c", "î  Configuration", ":e ~/.config/nvim/nvim-custom/init.lua<CR>"),
./lua/ui-override.lua:    dashboard.button("q", "ï  Quit Neovim", ":qa<CR>"),
./lua/ui-override.lua:}
./lua/ui-override.lua:
./lua/ui-override.lua:local function footer() return "..." end
./lua/ui-override.lua:
./lua/ui-override.lua:dashboard.section.footer.val = footer()
./lua/ui-override.lua:
./lua/ui-override.lua:dashboard.section.footer.opts.hl = "Type"
./lua/ui-override.lua:dashboard.section.header.opts.hl = "Include"
./lua/ui-override.lua:dashboard.section.buttons.opts.hl = "Keyword"
./lua/ui-override.lua:
./lua/ui-override.lua:dashboard.opts.opts.noautocmd = true
./lua/ui-override.lua:alpha.setup(dashboard.opts)
./lua/ui-override.lua:
./lua/ui-override.lua:-- function SetHighlight()
./lua/ui-override.lua:--     --  make comments brighter for dark themes
./lua/ui-override.lua:--     vim.api.nvim_set_hl(0, "Comment", { italic = true, fg = "#AAAAAA"  })
./lua/ui-override.lua:--     --  make highlights brighter for bright themes
./lua/ui-override.lua:--     vim.api.nvim_set_hl(0, "Visual", { bg = "#797979" })
./lua/ui-override.lua:--     vim.api.nvim_set_hl(0, "Normal", { bg = "none" })
./lua/ui-override.lua:--     vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })
./lua/ui-override.lua:-- end
./lua/ui-override.lua:
./lua/ui-override.lua:-- vim.api.nvim_create_autocmd({"VimEnter", "ColorScheme"}, {
./lua/ui-override.lua:--     group = vim.api.nvim_create_augroup('Color', {}),
./lua/ui-override.lua:--     pattern = "*",
./lua/ui-override.lua:--     callback = SetHighlight
./lua/ui-override.lua:-- })
./lua/lazy-init.lua:-- Bootstrap lazy.nvim
./lua/lazy-init.lua:local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
./lua/lazy-init.lua:if not (vim.uv or vim.loop).fs_stat(lazypath) then
./lua/lazy-init.lua:    local lazyrepo = "https://github.com/folke/lazy.nvim.git"
./lua/lazy-init.lua:    local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
./lua/lazy-init.lua:    if vim.v.shell_error ~= 0 then
./lua/lazy-init.lua:        vim.api.nvim_echo({
./lua/lazy-init.lua:            { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
./lua/lazy-init.lua:            { out, "WarningMsg" },
./lua/lazy-init.lua:            { "\nPress any key to exit..." },
./lua/lazy-init.lua:        }, true, {})
./lua/lazy-init.lua:        vim.fn.getchar()
./lua/lazy-init.lua:        os.exit(1)
./lua/lazy-init.lua:    end
./lua/lazy-init.lua:end
./lua/lazy-init.lua:vim.opt.rtp:prepend(lazypath)
./lua/lazy-init.lua:
./lua/lazy-init.lua:-- Setup lazy.nvim
./lua/lazy-init.lua:require("lazy").setup({
./lua/lazy-init.lua:    spec = {
./lua/lazy-init.lua:        -- import your plugins
./lua/lazy-init.lua:        { import = "plugins" },
./lua/lazy-init.lua:    },
./lua/lazy-init.lua:    -- Configure any other settings here. See the documentation for more details.
./lua/lazy-init.lua:    -- colorscheme that will be used when installing plugins.
./lua/lazy-init.lua:    install = { colorscheme = { "tokyonight" } },
./lua/lazy-init.lua:    -- automatically check for plugin updates
./lua/lazy-init.lua:    checker = { enabled = true, notify = false },
./lua/lazy-init.lua:})
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader><Left>", "<cmd>BufferPrevious<CR>", { desc = "Previous tab" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader>h", "<cmd>BufferPrevious<CR>", { desc = "which_key_ignore" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader><Right>", "<cmd>BufferNext<CR>", { desc = "Next tab" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader>l", "<cmd>BufferNext<CR>", { desc = "which_key_ignore" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader><Up>", "<cmd>BufferMovePrevious<CR>", { desc = "Move tab left" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader><Down>", "<cmd>BufferMoveNext<CR>", { desc = "Move tab right" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader>x", "<cmd>BufferClose<CR>", { desc = "Close tab/buffer" })
./lua/mappings/post-mappings.lua:
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader>tf", "<cmd>DiffviewFocusFiles<cr>", { desc = "[T]oggle [F]ile diff" })
./lua/mappings/post-mappings.lua:vim.keymap.set("n", "<leader>ts", "<cmd>DiffviewOpen<cr>", { desc = "[T]oggle [S]plit diff on current file" })
./lua/mappings/post-mappings.lua:
./lua/mappings/post-mappings.lua:function _G.set_terminal_keymaps()
./lua/mappings/post-mappings.lua:    local opts = { buffer = 0 }
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "<esc>", [[<C-\><C-n>]], opts)
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "jk", [[<C-\><C-n>]], opts)
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "<C-h>", [[<Cmd>wincmd h<CR>]], opts)
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "<C-j>", [[<Cmd>wincmd j<CR>]], opts)
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "<C-k>", [[<Cmd>wincmd k<CR>]], opts)
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "<C-l>", [[<Cmd>wincmd l<CR>]], opts)
./lua/mappings/post-mappings.lua:    vim.keymap.set("t", "<C-w>", [[<C-\><C-n><C-w>]], opts)
./lua/mappings/post-mappings.lua:end
./lua/mappings/post-mappings.lua:
./lua/mappings/post-mappings.lua:vim.cmd("autocmd! TermOpen term://* lua set_terminal_keymaps()")
./lua/mappings/post-mappings.lua:
./lua/mappings/post-mappings.lua:vim.api.nvim_create_autocmd({ "BufLeave", "WinLeave" }, {
./lua/mappings/post-mappings.lua:    group = vim.api.nvim_create_augroup("disable_statusline_on_inactive", {}),
./lua/mappings/post-mappings.lua:    desc = "Disable status line on unfocused buffers",
./lua/mappings/post-mappings.lua:    pattern = "*",
./lua/mappings/post-mappings.lua:    callback = function() vim.b.ministatusline_disable = true end,
./lua/mappings/post-mappings.lua:})
./lua/mappings/post-mappings.lua:
./lua/mappings/post-mappings.lua:vim.api.nvim_create_autocmd({ "BufEnter" }, {
./lua/mappings/post-mappings.lua:    group = vim.api.nvim_create_augroup("disable_statusline_on_inactive", {}),
./lua/mappings/post-mappings.lua:    desc = "Disable status line on unfocused buffers",
./lua/mappings/post-mappings.lua:    pattern = "*",
./lua/mappings/post-mappings.lua:    callback = function() vim.b.ministatusline_disable = false end,
./lua/mappings/post-mappings.lua:})
./lua/mappings/init-mappings.lua:-- keymaps/macros
./lua/mappings/init-mappings.lua:local map = vim.keymap.set
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:-- handy keymaps
./lua/mappings/init-mappings.lua:-- map("n", "<leader>x", ":bd<CR>:bp<CR>")
./lua/mappings/init-mappings.lua:map("n", "n", "nzz")
./lua/mappings/init-mappings.lua:map("n", "N", "Nzz")
./lua/mappings/init-mappings.lua:map("n", "*", "*zz")
./lua/mappings/init-mappings.lua:map("n", "#", "#zz")
./lua/mappings/init-mappings.lua:map("n", "g*", "g*zz")
./lua/mappings/init-mappings.lua:map("n", "g#", "g#zz")
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:map("i", "<C-j>", "<Esc><cmd>m .+1<CR>==gi", { noremap = true, silent = true, desc = "Move selected block down" })
./lua/mappings/init-mappings.lua:map("i", "<C-k>", "<Esc><cmd>m .-2<CR>==gi", { noremap = true, silent = true, desc = "Move selected block up" })
./lua/mappings/init-mappings.lua:map("v", "<C-j>", ":m '>+1<CR>gv=gv", { noremap = true, silent = true, desc = "Move selected block down" })
./lua/mappings/init-mappings.lua:map("v", "<C-k>", ":m '<-2<CR>gv=gv", { noremap = true, silent = true, desc = "Move selected block up" })
./lua/mappings/init-mappings.lua:map("n", "<C-j>", "<cmd>:m +1<CR>", { noremap = true, silent = true, desc = "Move selected block down" })
./lua/mappings/init-mappings.lua:map("n", "<C-k>", "<cmd>:m -2<CR>", { noremap = true, silent = true, desc = "Move selected block up" })
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:map("i", "<C-l>", "<Esc>>>i", { noremap = true, silent = true, desc = "Move selected block right" })
./lua/mappings/init-mappings.lua:map("i", "<C-h>", "<Esc><<i", { noremap = true, silent = true, desc = "Move selected block left" })
./lua/mappings/init-mappings.lua:map("v", "<C-l>", ">gv", { noremap = true, silent = true, desc = "Move selected block right" })
./lua/mappings/init-mappings.lua:map("v", "<C-h>", "<gv", { noremap = true, silent = true, desc = "Move selected block left" })
./lua/mappings/init-mappings.lua:map("n", "<C-h>", "<<gv", { noremap = true, silent = true, desc = "Move selected block right" })
./lua/mappings/init-mappings.lua:map("n", "<C-l>", ">>gv", { noremap = true, silent = true, desc = "Move selected block left" })
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:map("n", ",", "@@", { noremap = true, silent = true, desc = "Repeat previous macro" })
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:map("n", "<leader>w<Left>", "<C-w>h", { noremap = true, silent = true, desc = "[W]indow: focus left" })
./lua/mappings/init-mappings.lua:map("n", "<leader>w<Right>", "<C-w>l", { noremap = true, silent = true, desc = "[W]indow: focus right" })
./lua/mappings/init-mappings.lua:map("n", "<leader>w<Down>", "<C-w>j", { noremap = true, silent = true, desc = "[W]indow: focus down" })
./lua/mappings/init-mappings.lua:map("n", "<leader>w<Up>", "<C-w>k", { noremap = true, silent = true, desc = "[W]indow: focus up" })
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:map("n", "<leader>wh", "<C-w>h", { noremap = true, silent = true, desc = "which_key_ignore" })
./lua/mappings/init-mappings.lua:map("n", "<leader>wl", "<C-w>l", { noremap = true, silent = true, desc = "which_key_ignore" })
./lua/mappings/init-mappings.lua:map("n", "<leader>wj", "<C-w>j", { noremap = true, silent = true, desc = "which_key_ignore" })
./lua/mappings/init-mappings.lua:map("n", "<leader>wk", "<C-w>k", { noremap = true, silent = true, desc = "which_key_ignore" })
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:-- highlight yanked text
./lua/mappings/init-mappings.lua:vim.api.nvim_create_autocmd("TextYankPost", {
./lua/mappings/init-mappings.lua:    group = vim.api.nvim_create_augroup("highlight_yank", {}),
./lua/mappings/init-mappings.lua:    desc = "Hightlight selection on yank",
./lua/mappings/init-mappings.lua:    pattern = "*",
./lua/mappings/init-mappings.lua:    callback = function() vim.highlight.on_yank({ higroup = "IncSearch", timeout = 500 }) end,
./lua/mappings/init-mappings.lua:})
./lua/mappings/init-mappings.lua:
./lua/mappings/init-mappings.lua:-- copy default reg to/from system/mouse clipboard
./lua/mappings/init-mappings.lua:-- map("v", 'y', '+y')
./lua/mappings/init-mappings.lua:-- map("v", 'yy', '+yy')
./lua/mappings/keep-eng-in-normal.lua:-- ~/.config/nvim/init.lua
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- --- Configuration ---
./lua/mappings/keep-eng-in-normal.lua:-- IMPORTANT: Replace "com.apple.keylayout.US" with your actual English layout ID
./lua/mappings/keep-eng-in-normal.lua:local english_layout_id = "com.apple.keylayout.ABC" -- <-- REPLACE THIS!
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Global flags to control behavior (defaults are set if not already defined)
./lua/mappings/keep-eng-in-normal.lua:-- Enable/disable the main feature of switching to English in Normal/Cmd mode
./lua/mappings/keep-eng-in-normal.lua:vim.g.auto_english_default_enabled = vim.g.auto_english_default_enabled == nil and true
./lua/mappings/keep-eng-in-normal.lua:    or vim.g.auto_english_default_enabled
./lua/mappings/keep-eng-in-normal.lua:-- Enable/disable restoring the last used (non-English) layout when entering Insert mode
./lua/mappings/keep-eng-in-normal.lua:vim.g.auto_english_restore_insert_layout = vim.g.auto_english_restore_insert_layout == nil and false
./lua/mappings/keep-eng-in-normal.lua:    or vim.g.auto_english_restore_insert_layout
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Script-local variable to store the last used non-English layout in Insert mode
./lua/mappings/keep-eng-in-normal.lua:local s_last_insert_layout = nil
./lua/mappings/keep-eng-in-normal.lua:-- --- End Configuration ---
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:local function im_select_is_available()
./lua/mappings/keep-eng-in-normal.lua:    if vim.fn.executable("im-select") == 0 then
./lua/mappings/keep-eng-in-normal.lua:        vim.notify(
./lua/mappings/keep-eng-in-normal.lua:            "im-select command not found. Please ensure it's installed and in your PATH.",
./lua/mappings/keep-eng-in-normal.lua:            vim.log.levels.WARN,
./lua/mappings/keep-eng-in-normal.lua:            { title = "Layout Manager" }
./lua/mappings/keep-eng-in-normal.lua:        )
./lua/mappings/keep-eng-in-normal.lua:        return false
./lua/mappings/keep-eng-in-normal.lua:    end
./lua/mappings/keep-eng-in-normal.lua:    return true
./lua/mappings/keep-eng-in-normal.lua:end
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:local function switch_to_layout(layout_id)
./lua/mappings/keep-eng-in-normal.lua:    if not im_select_is_available() then return end
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:    local current_layout = vim.fn.trim(vim.fn.system("im-select"))
./lua/mappings/keep-eng-in-normal.lua:    if current_layout ~= layout_id and current_layout ~= "" then
./lua/mappings/keep-eng-in-normal.lua:        vim.fn.jobstart({ "im-select", layout_id }, { detach = true })
./lua/mappings/keep-eng-in-normal.lua:    end
./lua/mappings/keep-eng-in-normal.lua:end
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:local group = vim.api.nvim_create_augroup("AutoKeyboardLayout", { clear = true })
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Switch to English when leaving Insert mode (entering Normal mode)
./lua/mappings/keep-eng-in-normal.lua:vim.api.nvim_create_autocmd("InsertLeave", {
./lua/mappings/keep-eng-in-normal.lua:    group = group,
./lua/mappings/keep-eng-in-normal.lua:    pattern = "*",
./lua/mappings/keep-eng-in-normal.lua:    callback = function()
./lua/mappings/keep-eng-in-normal.lua:        if not vim.g.auto_english_default_enabled then return end
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:        if vim.g.auto_english_restore_insert_layout then
./lua/mappings/keep-eng-in-normal.lua:            if not im_select_is_available() then return end
./lua/mappings/keep-eng-in-normal.lua:            local layout_in_insert = vim.fn.trim(vim.fn.system("im-select"))
./lua/mappings/keep-eng-in-normal.lua:            if layout_in_insert ~= english_layout_id and layout_in_insert ~= "" then
./lua/mappings/keep-eng-in-normal.lua:                s_last_insert_layout = layout_in_insert
./lua/mappings/keep-eng-in-normal.lua:            -- vim.notify("Stored for Insert: " .. s_last_insert_layout, vim.log.levels.INFO, {title="Layout"}) -- For debugging
./lua/mappings/keep-eng-in-normal.lua:            else
./lua/mappings/keep-eng-in-normal.lua:                s_last_insert_layout = nil -- Clear if Insert mode was English
./lua/mappings/keep-eng-in-normal.lua:            end
./lua/mappings/keep-eng-in-normal.lua:        end
./lua/mappings/keep-eng-in-normal.lua:        switch_to_layout(english_layout_id)
./lua/mappings/keep-eng-in-normal.lua:    end,
./lua/mappings/keep-eng-in-normal.lua:})
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Switch to English when entering Command-line mode
./lua/mappings/keep-eng-in-normal.lua:vim.api.nvim_create_autocmd("CmdlineEnter", {
./lua/mappings/keep-eng-in-normal.lua:    group = group,
./lua/mappings/keep-eng-in-normal.lua:    pattern = "*",
./lua/mappings/keep-eng-in-normal.lua:    callback = function()
./lua/mappings/keep-eng-in-normal.lua:        if not vim.g.auto_english_default_enabled then return end
./lua/mappings/keep-eng-in-normal.lua:        switch_to_layout(english_layout_id)
./lua/mappings/keep-eng-in-normal.lua:    end,
./lua/mappings/keep-eng-in-normal.lua:})
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Restore layout (if enabled and stored) when entering Insert mode
./lua/mappings/keep-eng-in-normal.lua:vim.api.nvim_create_autocmd("InsertEnter", {
./lua/mappings/keep-eng-in-normal.lua:    group = group,
./lua/mappings/keep-eng-in-normal.lua:    pattern = "*",
./lua/mappings/keep-eng-in-normal.lua:    callback = function()
./lua/mappings/keep-eng-in-normal.lua:        -- We only restore if the main feature is on, and the restore sub-feature is on
./lua/mappings/keep-eng-in-normal.lua:        if not vim.g.auto_english_default_enabled or not vim.g.auto_english_restore_insert_layout then return end
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:        if s_last_insert_layout then
./lua/mappings/keep-eng-in-normal.lua:            -- vim.notify("Restoring for Insert: " .. s_last_insert_layout, vim.log.levels.INFO, {title="Layout"}) -- For debugging
./lua/mappings/keep-eng-in-normal.lua:            switch_to_layout(s_last_insert_layout)
./lua/mappings/keep-eng-in-normal.lua:        end
./lua/mappings/keep-eng-in-normal.lua:    end,
./lua/mappings/keep-eng-in-normal.lua:})
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Switch to English when Neovim starts (if not in insert/terminal mode)
./lua/mappings/keep-eng-in-normal.lua:vim.api.nvim_create_autocmd("VimEnter", {
./lua/mappings/keep-eng-in-normal.lua:    group = group,
./lua/mappings/keep-eng-in-normal.lua:    pattern = "*",
./lua/mappings/keep-eng-in-normal.lua:    callback = function()
./lua/mappings/keep-eng-in-normal.lua:        if not vim.g.auto_english_default_enabled then return end
./lua/mappings/keep-eng-in-normal.lua:        local current_mode = vim.fn.mode()
./lua/mappings/keep-eng-in-normal.lua:        if not (current_mode:match("^[iR]") or current_mode == "t") then switch_to_layout(english_layout_id) end
./lua/mappings/keep-eng-in-normal.lua:    end,
./lua/mappings/keep-eng-in-normal.lua:})
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:-- Custom commands to toggle the features
./lua/mappings/keep-eng-in-normal.lua:vim.api.nvim_create_user_command("ToggleAutoEnglish", function()
./lua/mappings/keep-eng-in-normal.lua:    vim.g.auto_english_default_enabled = not vim.g.auto_english_default_enabled
./lua/mappings/keep-eng-in-normal.lua:    local status = vim.g.auto_english_default_enabled and "Enabled" or "Disabled"
./lua/mappings/keep-eng-in-normal.lua:    vim.notify("Automatic English in Normal/Cmd mode: " .. status, vim.log.levels.INFO, { title = "Layout Manager" })
./lua/mappings/keep-eng-in-normal.lua:end, {})
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:vim.api.nvim_create_user_command("ToggleRestoreInsertLayout", function()
./lua/mappings/keep-eng-in-normal.lua:    vim.g.auto_english_restore_insert_layout = not vim.g.auto_english_restore_insert_layout
./lua/mappings/keep-eng-in-normal.lua:    local status = vim.g.auto_english_restore_insert_layout and "Enabled" or "Disabled"
./lua/mappings/keep-eng-in-normal.lua:    vim.notify("Restore last Insert mode layout: " .. status, vim.log.levels.INFO, { title = "Layout Manager" })
./lua/mappings/keep-eng-in-normal.lua:    if not vim.g.auto_english_restore_insert_layout then
./lua/mappings/keep-eng-in-normal.lua:        s_last_insert_layout = nil -- Clear any stored layout when disabling this feature
./lua/mappings/keep-eng-in-normal.lua:    end
./lua/mappings/keep-eng-in-normal.lua:    if vim.g.auto_english_restore_insert_layout and not vim.g.auto_english_default_enabled then
./lua/mappings/keep-eng-in-normal.lua:        vim.notify(
./lua/mappings/keep-eng-in-normal.lua:            "Note: Main 'AutoEnglish' feature is currently disabled.",
./lua/mappings/keep-eng-in-normal.lua:            vim.log.levels.WARN,
./lua/mappings/keep-eng-in-normal.lua:            { title = "Layout Manager" }
./lua/mappings/keep-eng-in-normal.lua:        )
./lua/mappings/keep-eng-in-normal.lua:    end
./lua/mappings/keep-eng-in-normal.lua:end, {})
./lua/mappings/keep-eng-in-normal.lua:
./lua/mappings/keep-eng-in-normal.lua:vim.notify(
./lua/mappings/keep-eng-in-normal.lua:    string.format(
./lua/mappings/keep-eng-in-normal.lua:        "Keyboard layout manager loaded. AutoEnglish: %s, RestoreInsert: %s",
./lua/mappings/keep-eng-in-normal.lua:        tostring(vim.g.auto_english_default_enabled),
./lua/mappings/keep-eng-in-normal.lua:        tostring(vim.g.auto_english_restore_insert_layout)
./lua/mappings/keep-eng-in-normal.lua:    ),
./lua/mappings/keep-eng-in-normal.lua:    vim.log.levels.INFO,
./lua/mappings/keep-eng-in-normal.lua:    { title = "Layout Manager" }
./lua/mappings/keep-eng-in-normal.lua:)
./lua/disabled-plugins/borderline.lua:return {
./lua/disabled-plugins/borderline.lua:    "mikesmithgh/borderline.nvim",
./lua/disabled-plugins/borderline.lua:    enabled = true,
./lua/disabled-plugins/borderline.lua:    lazy = true,
./lua/disabled-plugins/borderline.lua:    event = "VeryLazy",
./lua/disabled-plugins/borderline.lua:    config = function()
./lua/disabled-plugins/borderline.lua:        require("borderline").setup({
./lua/disabled-plugins/borderline.lua:            --  ...
./lua/disabled-plugins/borderline.lua:        })
./lua/disabled-plugins/borderline.lua:    end,
./lua/disabled-plugins/borderline.lua:}
./lua/disabled-plugins/vim-fugitive.lua:return {
./lua/disabled-plugins/vim-fugitive.lua:    "tpope/vim-fugitive",
./lua/disabled-plugins/vim-fugitive.lua:}
./lua/disabled-plugins/tokyonight.lua:return {
./lua/disabled-plugins/tokyonight.lua:    "folke/tokyonight.nvim",
./lua/disabled-plugins/tokyonight.lua:    priority = 1000,
./lua/disabled-plugins/tokyonight.lua:    init = function()
./lua/disabled-plugins/tokyonight.lua:        -- Load the colorscheme here.
./lua/disabled-plugins/tokyonight.lua:        -- Like many other themes, this one has different styles, and you could load
./lua/disabled-plugins/tokyonight.lua:        -- any other, such as 'tokyonight-storm', 'tokyonight-moon', or 'tokyonight-day'.
./lua/disabled-plugins/tokyonight.lua:        vim.cmd.colorscheme("tokyonight-night")
./lua/disabled-plugins/tokyonight.lua:
./lua/disabled-plugins/tokyonight.lua:        -- You can configure highlights by doing something like:
./lua/disabled-plugins/tokyonight.lua:        vim.cmd.hi("Comment guifg=White")
./lua/disabled-plugins/tokyonight.lua:        vim.cmd.hi("Normal guibg=NONE ctermbg=NONE")
./lua/disabled-plugins/tokyonight.lua:        vim.cmd.hi("Visual guibg=#797979")
./lua/disabled-plugins/tokyonight.lua:    end,
./lua/disabled-plugins/tokyonight.lua:}
./lua/disabled-plugins/gen.nvim.lua:return {
./lua/disabled-plugins/gen.nvim.lua:    event = "VeryLazy",
./lua/disabled-plugins/gen.nvim.lua:    "David-Kunz/gen.nvim",
./lua/disabled-plugins/gen.nvim.lua:}
./lua/disabled-plugins/gp.nvim.lua:local pre_prompt = [[
./lua/disabled-plugins/gp.nvim.lua:You are an experienced coder, specializing in Python, Rust, and TypeScript.
./lua/disabled-plugins/gp.nvim.lua:- Respond with working, type-annotated code.
./lua/disabled-plugins/gp.nvim.lua:- Use modern language features (Python 3.10+, Rust 2021).
./lua/disabled-plugins/gp.nvim.lua:- Return only code snippets without additional explanation unless explicitly asked.
./lua/disabled-plugins/gp.nvim.lua:]]
./lua/disabled-plugins/gp.nvim.lua:
./lua/disabled-plugins/gp.nvim.lua:return {
./lua/disabled-plugins/gp.nvim.lua:    "robitx/gp.nvim",
./lua/disabled-plugins/gp.nvim.lua:    config = function()
./lua/disabled-plugins/gp.nvim.lua:        local conf = {
./lua/disabled-plugins/gp.nvim.lua:            -- For customization, refer to Install > Configuration in the Documentation/Readme
./lua/disabled-plugins/gp.nvim.lua:            providers = {
./lua/disabled-plugins/gp.nvim.lua:                openai = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                azure = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                copilot = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                lmstudio = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                googleai = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                pplx = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                anthropic = { disable = true },
./lua/disabled-plugins/gp.nvim.lua:                ollama = {
./lua/disabled-plugins/gp.nvim.lua:                    disable = false,
./lua/disabled-plugins/gp.nvim.lua:                    endpoint = "http://localhost:11434/v1/chat/completions",
./lua/disabled-plugins/gp.nvim.lua:                    options = {
./lua/disabled-plugins/gp.nvim.lua:                        timeout = 300000, -- 5 minutes (in milliseconds)
./lua/disabled-plugins/gp.nvim.lua:                        stream = true, -- Required for long responses
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:            },
./lua/disabled-plugins/gp.nvim.lua:            agents = {
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "qwen2.5-coder:14b",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "qwen2.5-coder:14b",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "qwen2.5-coder:7b",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "qwen2.5-coder:7b",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "qwen2.5-coder:3b",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "qwen2.5-coder:3b",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "mistral",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "mistral:latest",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "deepseek-coder-v2",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "deepseek-coder-v2:16b",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "codestral",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "codestral:latest",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:                {
./lua/disabled-plugins/gp.nvim.lua:                    provider = "ollama",
./lua/disabled-plugins/gp.nvim.lua:                    name = "phi3",
./lua/disabled-plugins/gp.nvim.lua:                    chat = true,
./lua/disabled-plugins/gp.nvim.lua:                    command = true,
./lua/disabled-plugins/gp.nvim.lua:                    model = {
./lua/disabled-plugins/gp.nvim.lua:                        model = "phi3:medium-128k",
./lua/disabled-plugins/gp.nvim.lua:                    },
./lua/disabled-plugins/gp.nvim.lua:                    system_prompt = pre_prompt,
./lua/disabled-plugins/gp.nvim.lua:                },
./lua/disabled-plugins/gp.nvim.lua:            },
./lua/disabled-plugins/gp.nvim.lua:        }
./lua/disabled-plugins/gp.nvim.lua:        require("gp").setup(conf)
./lua/disabled-plugins/gp.nvim.lua:    end,
./lua/disabled-plugins/gp.nvim.lua:}
./lua/disabled-plugins/dadbod_completion.lua:local M = {}
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:function M.getCompletionItems(prefix, score_func)
./lua/disabled-plugins/dadbod_completion.lua:    local items = vim.api.nvim_call_function("vim_dadbod_completion#omni", { 0, prefix })
./lua/disabled-plugins/dadbod_completion.lua:    for _, item in pairs(items) do
./lua/disabled-plugins/dadbod_completion.lua:        item.user_data = vim.json.encode({ hover = item.info })
./lua/disabled-plugins/dadbod_completion.lua:        item.dup = 0
./lua/disabled-plugins/dadbod_completion.lua:    end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:    return items
./lua/disabled-plugins/dadbod_completion.lua:end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:M.complete_item = {
./lua/disabled-plugins/dadbod_completion.lua:    item = M.getCompletionItems,
./lua/disabled-plugins/dadbod_completion.lua:}
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:local nvim_cmp_source = {}
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:---Source constructor.
./lua/disabled-plugins/dadbod_completion.lua:nvim_cmp_source.new = function()
./lua/disabled-plugins/dadbod_completion.lua:    local self = setmetatable({}, { __index = nvim_cmp_source })
./lua/disabled-plugins/dadbod_completion.lua:    return self
./lua/disabled-plugins/dadbod_completion.lua:end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:nvim_cmp_source.get_debug_name = function() return "vim-dadbod-completion" end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:function nvim_cmp_source:is_available() return true end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:function nvim_cmp_source:get_trigger_characters(_) return { '"', "`", "[", "]", "." } end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:local map_kind_to_cmp_lsp_kind = {
./lua/disabled-plugins/dadbod_completion.lua:    F = 3, -- Function -> Function
./lua/disabled-plugins/dadbod_completion.lua:    C = 5, -- Column -> Field
./lua/disabled-plugins/dadbod_completion.lua:    A = 6, -- Alias -> Variable
./lua/disabled-plugins/dadbod_completion.lua:    T = 7, -- Table -> Class
./lua/disabled-plugins/dadbod_completion.lua:    R = 14, -- Reserved -> Keyword
./lua/disabled-plugins/dadbod_completion.lua:    S = 19, -- Schema -> Folder
./lua/disabled-plugins/dadbod_completion.lua:}
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:function nvim_cmp_source:complete(params, callback)
./lua/disabled-plugins/dadbod_completion.lua:    local input = string.sub(params.context.cursor_before_line, params.offset)
./lua/disabled-plugins/dadbod_completion.lua:    local results = vim.fn["vim_dadbod_completion#omni"](0, input)
./lua/disabled-plugins/dadbod_completion.lua:    local items = {}
./lua/disabled-plugins/dadbod_completion.lua:    for _, item in ipairs(results) do
./lua/disabled-plugins/dadbod_completion.lua:        table.insert(items, {
./lua/disabled-plugins/dadbod_completion.lua:            label = item.abbr,
./lua/disabled-plugins/dadbod_completion.lua:            dup = 0,
./lua/disabled-plugins/dadbod_completion.lua:            insertText = item.word,
./lua/disabled-plugins/dadbod_completion.lua:            labelDetails = {
./lua/disabled-plugins/dadbod_completion.lua:                description = item.menu,
./lua/disabled-plugins/dadbod_completion.lua:            },
./lua/disabled-plugins/dadbod_completion.lua:            documentation = item.info,
./lua/disabled-plugins/dadbod_completion.lua:            kind = map_kind_to_cmp_lsp_kind[item.kind],
./lua/disabled-plugins/dadbod_completion.lua:        })
./lua/disabled-plugins/dadbod_completion.lua:    end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:    callback({
./lua/disabled-plugins/dadbod_completion.lua:        items = items,
./lua/disabled-plugins/dadbod_completion.lua:        isIncomplete = true,
./lua/disabled-plugins/dadbod_completion.lua:    })
./lua/disabled-plugins/dadbod_completion.lua:end
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:M.nvim_cmp_source = nvim_cmp_source.new()
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/dadbod_completion.lua:return M
./lua/disabled-plugins/dadbod_completion.lua:
./lua/disabled-plugins/vim-smoothie.lua:return {
./lua/disabled-plugins/vim-smoothie.lua:    'psliwka/vim-smoothie',
./lua/disabled-plugins/vim-smoothie.lua:    lazy = false,
./lua/disabled-plugins/vim-smoothie.lua:}
./lua/disabled-plugins/catpuccin.lua:return { "catppuccin/nvim", name = "catppuccin", priority = 1000 }
./lua/disabled-plugins/image-preview.lua:return {
./lua/disabled-plugins/image-preview.lua:    "adelarsq/image_preview.nvim",
./lua/disabled-plugins/image-preview.lua:    event = "VeryLazy",
./lua/disabled-plugins/image-preview.lua:    config = function() require("image_preview").setup() end,
./lua/disabled-plugins/image-preview.lua:}
./lua/disabled-plugins/dadbod.lua:return {
./lua/disabled-plugins/dadbod.lua:    {
./lua/disabled-plugins/dadbod.lua:        "kristijanhusak/vim-dadbod-ui",
./lua/disabled-plugins/dadbod.lua:        dependencies = {
./lua/disabled-plugins/dadbod.lua:            { "tpope/vim-dotenv", lazy = true },
./lua/disabled-plugins/dadbod.lua:            { "tpope/vim-dadbod", lazy = true },
./lua/disabled-plugins/dadbod.lua:            { "kristijanhusak/vim-dadbod-completion", ft = { "sql", "mysql", "plsql" }, lazy = true },
./lua/disabled-plugins/dadbod.lua:        },
./lua/disabled-plugins/dadbod.lua:        cmd = {
./lua/disabled-plugins/dadbod.lua:            "DBUI",
./lua/disabled-plugins/dadbod.lua:            "DBUIToggle",
./lua/disabled-plugins/dadbod.lua:            "DBUIAddConnection",
./lua/disabled-plugins/dadbod.lua:            "DBUIFindBuffer",
./lua/disabled-plugins/dadbod.lua:        },
./lua/disabled-plugins/dadbod.lua:        init = function()
./lua/disabled-plugins/dadbod.lua:            vim.g.db_ui_use_nerd_fonts = 1
./lua/disabled-plugins/dadbod.lua:            vim.g.db_ui_winwidth = 30
./lua/disabled-plugins/dadbod.lua:            vim.g.db_ui_show_help = 0
./lua/disabled-plugins/dadbod.lua:            vim.g.db_ui_use_nvim_notify = 1
./lua/disabled-plugins/dadbod.lua:            vim.g.db_ui_win_position = "left"
./lua/disabled-plugins/dadbod.lua:
./lua/disabled-plugins/dadbod.lua:            require("which-key").register({
./lua/disabled-plugins/dadbod.lua:                ["<leader>D"] = {
./lua/disabled-plugins/dadbod.lua:                    name = "ó°¼ Db Tools",
./lua/disabled-plugins/dadbod.lua:                    u = { "<cmd>DBUIToggle<cr>", " DB UI Toggle" },
./lua/disabled-plugins/dadbod.lua:                    f = { "<cmd>DBUIFindBuffer<cr>", " DB UI Find buffer" },
./lua/disabled-plugins/dadbod.lua:                    r = { "<cmd>DBUIRenameBuffer<cr>", " DB UI Rename buffer" },
./lua/disabled-plugins/dadbod.lua:                    l = { "<cmd>DBUILastQueryInfo<cr>", " DB UI Last query infos" },
./lua/disabled-plugins/dadbod.lua:                },
./lua/disabled-plugins/dadbod.lua:            })
./lua/disabled-plugins/dadbod.lua:        end,
./lua/disabled-plugins/dadbod.lua:    },
./lua/disabled-plugins/dadbod.lua:}
./lua/disabled-plugins/llm.nvim.lua:return {
./lua/disabled-plugins/llm.nvim.lua:    "huggingface/llm.nvim",
./lua/disabled-plugins/llm.nvim.lua:    enabled = true,
./lua/disabled-plugins/llm.nvim.lua:    -- event = "VeryLazy",
./lua/disabled-plugins/llm.nvim.lua:    opts = {
./lua/disabled-plugins/llm.nvim.lua:        backend = "ollama",
./lua/disabled-plugins/llm.nvim.lua:        model = "qwen2.5-coder:1.5b-instruct-q8_0",
./lua/disabled-plugins/llm.nvim.lua:        accept_keymap = "<Tab>",
./lua/disabled-plugins/llm.nvim.lua:        url = "http://localhost:11434", -- llm uses /api/generate
./lua/disabled-plugins/llm.nvim.lua:        request_body = {
./lua/disabled-plugins/llm.nvim.lua:            options = {
./lua/disabled-plugins/llm.nvim.lua:                temperature = 0.01,
./lua/disabled-plugins/llm.nvim.lua:                top_p = 0.8,
./lua/disabled-plugins/llm.nvim.lua:                max_tokens = 100,
./lua/disabled-plugins/llm.nvim.lua:            },
./lua/disabled-plugins/llm.nvim.lua:        },
./lua/disabled-plugins/llm.nvim.lua:        fim = { -- qwen-coder
./lua/disabled-plugins/llm.nvim.lua:            enabled = true,
./lua/disabled-plugins/llm.nvim.lua:            prefix = "<|fim_prefix|>",
./lua/disabled-plugins/llm.nvim.lua:            middle = "<|fimâmiddle|>",
./lua/disabled-plugins/llm.nvim.lua:            suffix = "<|fimâsuffix|>",
./lua/disabled-plugins/llm.nvim.lua:        },
./lua/disabled-plugins/llm.nvim.lua:        tls_skip_verify_insecure = false,
./lua/disabled-plugins/llm.nvim.lua:        debounce_ms = 100,
./lua/disabled-plugins/llm.nvim.lua:        enable_suggestions_on_startup = true,
./lua/disabled-plugins/llm.nvim.lua:        -- enable_suggestions_on_files = "*", -- pattern matching syntax to enable suggestions on specific files, either a string or a list of strings
./lua/disabled-plugins/llm.nvim.lua:        disable_url_path_completion = false, -- cf Backend
./lua/disabled-plugins/llm.nvim.lua:        lsp = {
./lua/disabled-plugins/llm.nvim.lua:            bin_path = vim.api.nvim_call_function("stdpath", { "data" }) .. "/mason/bin/llm-ls",
./lua/disabled-plugins/llm.nvim.lua:        },
./lua/disabled-plugins/llm.nvim.lua:    },
./lua/disabled-plugins/llm.nvim.lua:}
./lua/disabled-plugins/neogit.lua:return {
./lua/disabled-plugins/neogit.lua:    "NeogitOrg/neogit",
./lua/disabled-plugins/neogit.lua:    dependencies = {
./lua/disabled-plugins/neogit.lua:        "nvim-lua/plenary.nvim", -- required
./lua/disabled-plugins/neogit.lua:        "sindrets/diffview.nvim", -- optional - Diff integration
./lua/disabled-plugins/neogit.lua:
./lua/disabled-plugins/neogit.lua:        -- Only one of these is needed.
./lua/disabled-plugins/neogit.lua:        "nvim-telescope/telescope.nvim", -- optional
./lua/disabled-plugins/neogit.lua:        "ibhagwan/fzf-lua", -- optional
./lua/disabled-plugins/neogit.lua:        "echasnovski/mini.pick", -- optional
./lua/disabled-plugins/neogit.lua:        "folke/snacks.nvim", -- optional
./lua/disabled-plugins/neogit.lua:    },
./lua/disabled-plugins/neogit.lua:}
./lua/disabled-plugins/nvim-surround.lua:return {
./lua/disabled-plugins/nvim-surround.lua:    "kylechui/nvim-surround",
./lua/disabled-plugins/nvim-surround.lua:    version = "*", -- Use for stability; omit to use `main` branch for the latest features
./lua/disabled-plugins/nvim-surround.lua:    event = "VeryLazy",
./lua/disabled-plugins/nvim-surround.lua:    config = function()
./lua/disabled-plugins/nvim-surround.lua:        require("nvim-surround").setup({
./lua/disabled-plugins/nvim-surround.lua:            -- Configuration here, or leave empty to use defaults
./lua/disabled-plugins/nvim-surround.lua:        })
./lua/disabled-plugins/nvim-surround.lua:    end,
./lua/disabled-plugins/nvim-surround.lua:}
./lua/disabled-plugins/toggleterm.lua:return {
./lua/disabled-plugins/toggleterm.lua:    -- amongst your other plugins
./lua/disabled-plugins/toggleterm.lua:    { "akinsho/toggleterm.nvim" },
./lua/disabled-plugins/toggleterm.lua:    config = function() require("toggleterm").setup() end,
./lua/disabled-plugins/toggleterm.lua:    enable = false,
./lua/disabled-plugins/toggleterm.lua:}
./lua/disabled-plugins/toggleterm.lua:
./lua/disabled-plugins/bufferline.lua:return {
./lua/disabled-plugins/bufferline.lua:    "akinsho/bufferline.nvim",
./lua/disabled-plugins/bufferline.lua:    version = "*",
./lua/disabled-plugins/bufferline.lua:    dependencies = "nvim-tree/nvim-web-devicons",
./lua/disabled-plugins/bufferline.lua:    config = function()
./lua/disabled-plugins/bufferline.lua:        require("bufferline").setup({
./lua/disabled-plugins/bufferline.lua:            options = {
./lua/disabled-plugins/bufferline.lua:                auto_toggle_bufferline = true,
./lua/disabled-plugins/bufferline.lua:                offsets = {
./lua/disabled-plugins/bufferline.lua:                    {
./lua/disabled-plugins/bufferline.lua:                        filetype = "NvimTree",
./lua/disabled-plugins/bufferline.lua:                        text = "File Explorer",
./lua/disabled-plugins/bufferline.lua:                        highlight = "Directory",
./lua/disabled-plugins/bufferline.lua:                        separator = true, -- use a "true" to enable the default, or set your own character
./lua/disabled-plugins/bufferline.lua:                    },
./lua/disabled-plugins/bufferline.lua:                },
./lua/disabled-plugins/bufferline.lua:            },
./lua/disabled-plugins/bufferline.lua:        })
./lua/disabled-plugins/bufferline.lua:    end,
./lua/disabled-plugins/bufferline.lua:    lazy = false,
./lua/disabled-plugins/bufferline.lua:    keys = {
./lua/disabled-plugins/bufferline.lua:        { "<Tab>", "<cmd>BufferLineCycleNext<cr>", desc = "Next tab" },
./lua/disabled-plugins/bufferline.lua:        { "<S-Tab>", "<cmd>BufferLineCyclePrev<cr>", desc = "Next tab" },
./lua/disabled-plugins/bufferline.lua:    },
./lua/disabled-plugins/bufferline.lua:}
./lua/disabled-plugins/bufferline.lua:
./lua/disabled-plugins/langmapper.lua:-- auto remap RU keys and commands to EN
./lua/disabled-plugins/langmapper.lua:return {
./lua/disabled-plugins/langmapper.lua:    "Wansmer/langmapper.nvim",
./lua/disabled-plugins/langmapper.lua:    lazy = false,
./lua/disabled-plugins/langmapper.lua:    priority = 1, -- High priority is needed if you will use `autoremap()`
./lua/disabled-plugins/langmapper.lua:    config = function()
./lua/disabled-plugins/langmapper.lua:        require("langmapper").setup({--[[ your config ]]
./lua/disabled-plugins/langmapper.lua:        })
./lua/disabled-plugins/langmapper.lua:    end,
./lua/disabled-plugins/langmapper.lua:}
./lua/disabled-plugins/im-select.lua:-- Plugin for auto switching lang in insert mode
./lua/disabled-plugins/im-select.lua:return {
./lua/disabled-plugins/im-select.lua:    "keaising/im-select.nvim",
./lua/disabled-plugins/im-select.lua:    config = function() require("im_select").setup({}) end,
./lua/disabled-plugins/im-select.lua:}
./lua/disabled-plugins/harpoon.lua:return {
./lua/disabled-plugins/harpoon.lua:    "ThePrimeagen/harpoon",
./lua/disabled-plugins/harpoon.lua:    branch = "harpoon2",
./lua/disabled-plugins/harpoon.lua:    dependencies = { "nvim-lua/plenary.nvim" },
./lua/disabled-plugins/harpoon.lua:    init = function()
./lua/disabled-plugins/harpoon.lua:        local harpoon = require("harpoon")
./lua/disabled-plugins/harpoon.lua:
./lua/disabled-plugins/harpoon.lua:        -- REQUIRED
./lua/disabled-plugins/harpoon.lua:        harpoon:setup()
./lua/disabled-plugins/harpoon.lua:        -- REQUIRED
./lua/disabled-plugins/harpoon.lua:
./lua/disabled-plugins/harpoon.lua:        vim.keymap.set("n", "<leader>a", function() harpoon:list():add() end)
./lua/disabled-plugins/harpoon.lua:        vim.keymap.set("n", "<C-e>", function() harpoon.ui:toggle_quick_menu(harpoon:list()) end)
./lua/disabled-plugins/harpoon.lua:    end,
./lua/disabled-plugins/harpoon.lua:}
./lua/disabled-plugins/harpoon.lua:
./lua/disabled-plugins/cobalt-2theme.lua:return {
./lua/disabled-plugins/cobalt-2theme.lua:    "lalitmee/cobalt2.nvim",
./lua/disabled-plugins/cobalt-2theme.lua:    event = { "ColorSchemePre" }, -- if you want to lazy load
./lua/disabled-plugins/cobalt-2theme.lua:    dependencies = { "tjdevries/colorbuddy.nvim", tag = "v1.0.0" },
./lua/disabled-plugins/cobalt-2theme.lua:    init = function() require("colorbuddy").colorscheme("cobalt2") end,
./lua/disabled-plugins/cobalt-2theme.lua:}
./lazy-lock.json:{
./lazy-lock.json:  "LuaSnip": { "branch": "master", "commit": "faf3c94a44508cec1b961406d36cc65113ff3b98" },
./lazy-lock.json:  "alpha-nvim": { "branch": "main", "commit": "de72250e054e5e691b9736ee30db72c65d560771" },
./lazy-lock.json:  "barbar.nvim": { "branch": "master", "commit": "53b5a2f34b68875898f0531032fbf090e3952ad7" },
./lazy-lock.json:  "cmp-buffer": { "branch": "main", "commit": "b74fab3656eea9de20a9b8116afa3cfc4ec09657" },
./lazy-lock.json:  "cmp-nvim-lsp": { "branch": "main", "commit": "a8912b88ce488f411177fc8aed358b04dc246d7b" },
./lazy-lock.json:  "cmp-path": { "branch": "main", "commit": "c6635aae33a50d6010bf1aa756ac2398a2d54c32" },
./lazy-lock.json:  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
./lazy-lock.json:  "conform.nvim": { "branch": "master", "commit": "6feb2f28f9a9385e401857b21eeac3c1b66dd628" },
./lazy-lock.json:  "cyberdream.nvim": { "branch": "main", "commit": "339a7b1293568405847b3627247da82a6030a852" },
./lazy-lock.json:  "diffview.nvim": { "branch": "main", "commit": "4516612fe98ff56ae0415a259ff6361a89419b0a" },
./lazy-lock.json:  "friendly-snippets": { "branch": "main", "commit": "572f5660cf05f8cd8834e096d7b4c921ba18e175" },
./lazy-lock.json:  "gitsigns.nvim": { "branch": "main", "commit": "8b729e489f1475615dc6c9737da917b3bc163605" },
./lazy-lock.json:  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
./lazy-lock.json:  "lazygit.nvim": { "branch": "main", "commit": "b9eae3badab982e71abab96d3ee1d258f0c07961" },
./lazy-lock.json:  "lspkind.nvim": { "branch": "master", "commit": "d79a1c3299ad0ef94e255d045bed9fa26025dab6" },
./lazy-lock.json:  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d0548ee" },
./lazy-lock.json:  "mason-lspconfig.nvim": { "branch": "main", "commit": "3856bbb0da214d1f2f3d5a2dd3fea26591f930f9" },
./lazy-lock.json:  "mason.nvim": { "branch": "main", "commit": "9eaedb864cdadc29c6eb7d761a6c0d8aee26c91b" },
./lazy-lock.json:  "mini-git": { "branch": "main", "commit": "a0ddc6302f654523053c28109e8b6dbbf05c08f8" },
./lazy-lock.json:  "mini.ai": { "branch": "main", "commit": "b91997d220086e92edc1fec5ce82094dcc234291" },
./lazy-lock.json:  "mini.diff": { "branch": "main", "commit": "ec8a5ae365c5d15920721ea42b1351dbc9e61f2d" },
./lazy-lock.json:  "mini.icons": { "branch": "main", "commit": "397ed3807e96b59709ef3292f0a3e253d5c1dc0a" },
./lazy-lock.json:  "mini.nvim": { "branch": "main", "commit": "94cae4660a8b2d95dbbd56e1fbc6fcfa2716d152" },
./lazy-lock.json:  "nvim-autopairs": { "branch": "master", "commit": "4d74e75913832866aa7de35e4202463ddf6efd1b" },
./lazy-lock.json:  "nvim-cmp": { "branch": "main", "commit": "b5311ab3ed9c846b585c0c15b7559be131ec4be9" },
./lazy-lock.json:  "nvim-lspconfig": { "branch": "master", "commit": "562487bc108bf73c2493f9e701b9334b48163216" },
./lazy-lock.json:  "nvim-scrollbar": { "branch": "main", "commit": "6994eb9f73d5fdc36ee2c8717940e8c853e51a49" },
./lazy-lock.json:  "nvim-tree.lua": { "branch": "master", "commit": "25d16aab7d29ca940a9feb92e6bb734697417009" },
./lazy-lock.json:  "nvim-treesitter": { "branch": "master", "commit": "066fd6505377e3fd4aa219e61ce94c2b8bdb0b79" },
./lazy-lock.json:  "nvim-web-devicons": { "branch": "master", "commit": "1fb58cca9aebbc4fd32b086cb413548ce132c127" },
./lazy-lock.json:  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
./lazy-lock.json:  "telescope.nvim": { "branch": "master", "commit": "a0bbec21143c7bc5f8bb02e0005fa0b982edc026" },
./lazy-lock.json:  "toggleterm.nvim": { "branch": "main", "commit": "50ea089fc548917cc3cc16b46a8211833b9e3c7c" },
./lazy-lock.json:  "undotree": { "branch": "master", "commit": "b951b87b46c34356d44aa71886aecf9dd7f5788a" },
./lazy-lock.json:  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" }
./lazy-lock.json:}
./.stylua.toml:collapse_simple_statement = "Always"
./.stylua.toml:indent_type = "Spaces"
./.stylua.toml:indent_width = 4
